from cairosvg import svg2png
from evaluation.chamfer import calculate_chamfer
from evaluation.clipscore import clipscore
from evaluation.dinov2 import dinov2_cos
from evaluation.mse import calculate_MSE
from func_timeout import func_timeout, FunctionTimedOut
from glob import glob
from tqdm import tqdm
import os
import pandas as pd
import sys

triplets = sys.argv[1] # Folder containing the datasets
model_output = sys.argv[2] # Folder to save images generated by LLM
output_file = sys.argv[3] # Output file

IMG_SIZE = 224

rasterize_config = {
  "output_width":IMG_SIZE,
  "output_height":IMG_SIZE,
  "parent_width":IMG_SIZE,
  "parent_height":IMG_SIZE,
  "background_color":"white",
}
if model_output[-1] == "/":
  model_output = model_output[:-1]

# Rasterize SVGs
output_png = model_output+"_png"
ref_png = "ref_png"
os.makedirs(output_png)
os.makedirs(ref_png)
for file in tqdm(glob(os.path.join(model_output, "*.svg"))):
  triplet_id = os.path.basename(file).removesuffix(".svg")
  img_ref = os.path.join(triplets, triplet_id, "after.svg")
  try:
    func_timeout(5, svg2png, kwargs={"url":img_ref, "write_to":os.path.join(ref_png, f"{triplet_id}.png"), **rasterize_config})
  except FunctionTimedOut:
    print(f"Rasterizing {img_ref} did not end within 5 seconds.")
  except Exception as e:
    print(img_ref, e)
  
  try:
    func_timeout(5, svg2png, kwargs={"url":file, "write_to":os.path.join(output_png, f"{triplet_id}.png"), **rasterize_config})
  except FunctionTimedOut:
    print(f"Rasterizing {file} did not end within 5 seconds.")
  except Exception as e:
    print(file, e)

# Evaluation
img_metrics = {
  "mse": calculate_MSE,
  "dino": dinov2_cos
}
img_text_metrics = {
  "clipscore": clipscore
}
vector_metrics = {
  "chamfer": calculate_chamfer
}
results = {}
for name, func in img_metrics.items():
  print(name)
  metric = func(output_png, ref_png)
  results[name] = pd.Series(metric)
for name, func in img_text_metrics.items():
  print(name)
  metric = func(output_png, triplets)
  results[name] = pd.Series(metric)
for name, func in vector_metrics.items():
  print(name)
  metric = func(model_output, output_png, triplets)
  results[name] = pd.Series(metric)

# Save results
results_df = pd.DataFrame(results)
results_df.to_csv(output_file)